-- Create database
CREATE DATABASE IF NOT EXISTS retail_capstone;
USE retail_capstone;

CREATE TABLE IF NOT EXISTS products (
product_id INT AUTO_INCREMENT PRIMARY KEY,
sku VARCHAR(64) UNIQUE,
name VARCHAR(255) NOT NULL,
category VARCHAR(100),
unit_price DECIMAL(10,2) NOT NULL DEFAULT 0.00,
reorder_level INT NOT NULL DEFAULT 10,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE IF NOT EXISTS inventory (
inventory_id INT AUTO_INCREMENT PRIMARY KEY,
product_id INT NOT NULL,
warehouse VARCHAR(100) DEFAULT 'main',
quantity INT NOT NULL DEFAULT 0,
last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS sales (
sale_id INT AUTO_INCREMENT PRIMARY KEY,
product_id INT NOT NULL,
sale_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
quantity INT NOT NULL,
sale_price DECIMAL(10,2) NOT NULL,
customer_id VARCHAR(100),
channel VARCHAR(50) DEFAULT 'store',
FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE RESTRICT
);

INSERT INTO products (sku, name, category, unit_price, reorder_level) VALUES
('SKU-1001','Classic White T-Shirt','Apparel',199.00,20),
('SKU-1002','Blue Jeans','Apparel',999.00,10),
('SKU-2001','Wireless Mouse','Accessories',599.00,15);


INSERT INTO inventory (product_id, warehouse, quantity) VALUES
(1,'main',35),
(2,'main',8),
(3,'main',12),
(2,'warehouse-b',5);


INSERT INTO sales (product_id, sale_date, quantity, sale_price, customer_id, channel) VALUES
(1,'2025-10-01 10:15:00',2,199.00,'CUST-001','online'),
(2,'2025-10-02 14:30:00',1,999.00,'CUST-002','store'),
(3,'2025-10-03 11:00:00',3,599.00,'CUST-003','online');

-- CRUD examples
-- Create
INSERT INTO products (sku, name, category, unit_price, reorder_level)
VALUES ('SKU-3001','Sports Cap','Accessories',249.00,30);


-- Read
SELECT p.*, i.warehouse, i.quantity
FROM products p
LEFT JOIN inventory i ON p.product_id = i.product_id;


-- Update
UPDATE inventory SET quantity = quantity - 1, last_updated = NOW()
WHERE product_id = 1 AND warehouse = 'main';


-- Delete
DELETE FROM sales WHERE sale_id = 1;


-- Stored procedure: identify low-stock items (by threshold or product's reorder_level)
DROP PROCEDURE IF EXISTS get_low_stock;
DELIMITER $$
CREATE PROCEDURE get_low_stock(IN p_threshold INT)
BEGIN
-- If p_threshold <= 0, use product's reorder_level; otherwise compare to p_threshold
SELECT p.product_id,
p.sku,
p.name,
COALESCE(i.warehouse,'main') AS warehouse,
COALESCE(i.quantity,0) AS quantity,
p.reorder_level
FROM products p
LEFT JOIN inventory i ON p.product_id = i.product_id
WHERE (p_threshold > 0 AND COALESCE(i.quantity,0) <= p_threshold)
OR (p_threshold <= 0 AND COALESCE(i.quantity,0) <= p.reorder_level)
ORDER BY COALESCE(i.quantity,0) ASC;
END$$
DELIMITER ;

