use ecommerceDB
switched to db ecommerceDB
db.customers.insertMany([
  { _id: 1, name: "Rahul Sharma", email: "rahul@example.com", city: "Bangalore" },
  { _id: 2, name: "Priya Singh", email: "priya@example.com", city: "Delhi" },
  { _id: 3, name: "Aman Kumar", email: "aman@example.com", city: "Hyderabad" },
  { _id: 4, name: "Sneha Reddy", email: "sneha@example.com", city: "Chennai" }
]);
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4
  }
}
db.products.insertMany([
  { _id: 101, name: "Laptop", category: "Electronics", price: 55000 },
  { _id: 102, name: "Mobile Phone", category: "Electronics", price: 25000 },
  { _id: 103, name: "Headphones", category: "Accessories", price: 3000 },
  { _id: 104, name: "Tablet", category: "Electronics", price: 20000 },
  { _id: 105, name: "Chair", category: "Furniture", price: 5000 }
]);
{
  acknowledged: true,
  insertedIds: {
    '0': 101,
    '1': 102,
    '2': 103,
    '3': 104,
    '4': 105
  }
}
db.orders.insertMany([
  {
    _id: 1001,
    customer_id: 1,
    items: [
      { product_id: 101, quantity: 1 },
      { product_id: 103, quantity: 2 }
    ],
    order_date: ISODate("2025-01-05")
  },
  {
    _id: 1002,
    customer_id: 2,
    items: [
      { product_id: 102, quantity: 1 },
      { product_id: 105, quantity: 4 }
    ],
    order_date: ISODate("2025-01-06")
  },
  {
    _id: 1003,
    customer_id: 3,
    items: [
      { product_id: 104, quantity: 1 }
    ],
    order_date: ISODate("2025-01-09")
  }
]);
{
  acknowledged: true,
  insertedIds: {
    '0': 1001,
    '1': 1002,
    '2': 1003
  }
}
 db.customers.find();
{
  _id: 1,
  name: 'Rahul Sharma',
  email: 'rahul@example.com',
  city: 'Bangalore'
}
{
  _id: 2,
  name: 'Priya Singh',
  email: 'priya@example.com',
  city: 'Delhi'
}
{
  _id: 3,
  name: 'Aman Kumar',
  email: 'aman@example.com',
  city: 'Hyderabad'
}
{
  _id: 4,
  name: 'Sneha Reddy',
  email: 'sneha@example.com',
  city: 'Chennai'
}
db.products.find({category: "Electronics"});
{
  _id: 101,
  name: 'Laptop',
  category: 'Electronics',
  price: 55000
}
{
  _id: 102,
  name: 'Mobile Phone',
  category: 'Electronics',
  price: 25000
}
{
  _id: 104,
  name: 'Tablet',
  category: 'Electronics',
  price: 20000
}
db.orders.find({customer_id: 1});
{
  _id: 1001,
  customer_id: 1,
  items: [
    {
      product_id: 101,
      quantity: 1
    },
    {
      product_id: 103,
      quantity: 2
    }
  ],
  order_date: 2025-01-05T00:00:00.000Z
}
db.products.updateOne({_id: 103}, { $set:  {price: 3200 } });
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
db.products.updateOne({_id: 2}, { $set:  {city: "Gurgaon" } });
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}
db.customers.updateOne({_id: 2}, { $set:  {city: "Gurgaon" } });
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
db.customers.createIndex({email: 1},{unique: true});
email_1
db.products.createIndex({ category: 1}, {price: -1});
category_1
db.customers.getIndexes();
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { email: 1 }, name: 'email_1', unique: true }
]
db.products.getIndexes();
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { category: 1 }, name: 'category_1' }
]
db.products.find({ category: "Electronics" }).sort({ price: -1 }).explain("executionStats")
{
        works: 4,
        advanced: 3,
        needTime: 0,
        needYield: 0,
        saveState: 0,
        restoreState: 0,
        isEOF: 1,
        docsExamined: 3,
        alreadyHasObj: 0,
        inputStage: {
          stage: 'IXSCAN',
          nReturned: 3,
          executionTimeMillisEstimate: 0,
          works: 4,
          advanced: 3,
          needTime: 0,
          needYield: 0,
          saveState: 0,
          restoreState: 0,
          isEOF: 1,
          keyPattern: {
            category: 1
          },
          indexName: 'category_1',
          isMultiKey: false,
          multiKeyPaths: {
            category: []
          },
          isUnique: false,
          isSparse: false,
          isPartial: false,
          indexVersion: 2,
          direction: 'forward',
          indexBounds: {
            category: [
              '["Electronics", "Electronics"]'
            ]
          },
          keysExamined: 3,
          seeks: 1,
          dupsTested: 0,
          dupsDropped: 0
        }
      }
    }
  },
  queryShapeHash: '3CE6B28CE8EE5DA7BB081C872F4C32814B2DA5710D67B12CD7FA92AD5B597752',
  command: {
    find: 'products',
    filter: {
      category: 'Electronics'
    },
    sort: {
      price: -1
    },
    '$db': 'ecommerceDB'
  },
  serverInfo: {
    host: 'DESKTOP-3228A6K',
    port: 27017,
    version: '8.0.13',
    gitVersion: '8dc5cd2a30c4524132e2d44bb314544dc477e611'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeRestricted',
    internalQueryPlannerIgnoreIndexWithCollationForRegex: 1
  },
  ok: 1
}
db.products.find({ price: { $gt: 20000 } }).sort({ price: -1 }).explain("executionStats")
{
    executionTimeMillis: 2,
    totalKeysExamined: 0,
    totalDocsExamined: 5,
    executionStages: {
      isCached: false,
      stage: 'SORT',
      nReturned: 2,
      executionTimeMillisEstimate: 0,
      works: 9,
      advanced: 2,
      needTime: 6,
      needYield: 0,
      saveState: 0,
      restoreState: 0,
      isEOF: 1,
      sortPattern: {
        price: -1
      },
      memLimit: 104857600,
      type: 'simple',
      totalDataSizeSorted: 206,
      usedDisk: false,
      spills: 0,
      spilledDataStorageSize: 0,
      inputStage: {
        stage: 'COLLSCAN',
        filter: {
          price: {
            '$gt': 20000
          }
        },
        nReturned: 2,
        executionTimeMillisEstimate: 0,
        works: 6,
        advanced: 2,
        needTime: 3,
        needYield: 0,
        saveState: 0,
        restoreState: 0,
        isEOF: 1,
        direction: 'forward',
        docsExamined: 5
      }
    }
  },
  queryShapeHash: '4FF2CBC347D02534FE0C1E6360D81B1AF759B247E33BFCB0D30E653E14896792',
  command: {
    find: 'products',
    filter: {
      price: {
        '$gt': 20000
      }
    },
    sort: {
      price: -1
    },
    '$db': 'ecommerceDB'
  },
  serverInfo: {
    host: 'DESKTOP-3228A6K',
    port: 27017,
    version: '8.0.13',
    gitVersion: '8dc5cd2a30c4524132e2d44bb314544dc477e611'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeRestricted',
    internalQueryPlannerIgnoreIndexWithCollationForRegex: 1
  },
  ok: 1
}
db.orders.aggregate([
  { $unwind: "$items" },
  {
    $lookup: {
      from: "products",
      localField: "items.product_id",
      foreignField: "_id",
      as: "productDetails"
    }
  },
  { $unwind: "$productDetails" },
  {
    $group: {
      _id: "$customer_id",
      totalSpend: { $sum: { $multiply: ["$items.quantity", "$productDetails.price"] } }
    }
  }
]);
 
{
  _id: 1,
  totalSpend: 61400
}
{
  _id: 2,
  totalSpend: 45000
}
{
  _id: 3,
  totalSpend: 20000
}
db.orders.aggregate([
  {
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "_id",
      as: "customerDetails"
    }
  },
  { $unwind: "$customerDetails" },
  {
    $project: {
      _id: 1,
      order_date: 1,
      "customerDetails.name": 1,
      "customerDetails.city": 1
    }
  }
]);
